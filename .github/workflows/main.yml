name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
          architecture: x64
          cache: 'pip'

      - name: Setup Virtual env
        uses: actions/cache@v4
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Create and activate virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Create Zipfile archive of Dependencies
        run: |
          cd ./venv/lib/python3.13/site-packages
          zip -r9 ../../../../api.zip .

      - name: Add App to Zipfile
        run: cd ./app && zip -g ../api.zip -r .

      - name: Upload zip file artifact
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: api.zip
          retention-days: 5

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Download Lambda api.zip
        uses: actions/download-artifact@v4
        with:
          name: api

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Upload to S3
        run: aws s3 cp api.zip s3://fastapi-cicd-716360905893/api.zip

      - name: Deploy new Lambda
        run: aws lambda update-function-code --function-name fastapi-cicd-lambda-716360905893 --s3-bucket fastapi-cicd-716360905893 --s3-key api.zip

      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          AWS_REGION=${{ secrets.AWS_DEFAULT_REGION }}
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV

      - name: Create or Update API Gateway
        run: |
          # Check if API Gateway exists
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='fastapi-lambda-gateway'].id" --output text)
          
          if [ -z "$API_ID" ]; then
            echo "Creating new API Gateway..."
            # Create API Gateway
            API_ID=$(aws apigateway create-rest-api --name fastapi-lambda-gateway --query "id" --output text)
            
            # Create resource with proxy integration
            PARENT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[0].id" --output text)
            RESOURCE_ID=$(aws apigateway create-resource --rest-api-id $API_ID --parent-id $PARENT_ID --path-part "{proxy+}" --query "id" --output text)
            
            # Create ANY method for proxy integration
            aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method ANY --authorization-type NONE
            
            # Create integration with Lambda
            aws apigateway put-integration --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method ANY --type AWS_PROXY \
              --integration-http-method POST --uri arn:aws:apigateway:${AWS_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:fastapi-cicd-lambda-716360905893/invocations
            
            # Add root path handling
            ROOT_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/'].id" --output text)
            aws apigateway put-method --rest-api-id $API_ID --resource-id $ROOT_RESOURCE_ID --http-method ANY --authorization-type NONE
            aws apigateway put-integration --rest-api-id $API_ID --resource-id $ROOT_RESOURCE_ID --http-method ANY --type AWS_PROXY \
              --integration-http-method POST --uri arn:aws:apigateway:${AWS_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:fastapi-cicd-lambda-716360905893/invocations
            
            # Add permissions for API Gateway to invoke Lambda (for proxy resource)
            aws lambda add-permission --function-name fastapi-cicd-lambda-716360905893 \
              --statement-id apigateway-proxy --action lambda:InvokeFunction \
              --principal apigateway.amazonaws.com \
              --source-arn "arn:aws:execute-api:${AWS_REGION}:${AWS_ACCOUNT_ID}:${API_ID}/*/*/{proxy+}"
            
            # Add permissions for API Gateway to invoke Lambda (for root resource)
            aws lambda add-permission --function-name fastapi-cicd-lambda-716360905893 \
              --statement-id apigateway-root --action lambda:InvokeFunction \
              --principal apigateway.amazonaws.com \
              --source-arn "arn:aws:execute-api:${AWS_REGION}:${AWS_ACCOUNT_ID}:${API_ID}/*/*/*"
            
            # Deploy the API
            DEPLOYMENT_ID=$(aws apigateway create-deployment --rest-api-id $API_ID --stage-name prod --query "id" --output text)
            
            echo "API Gateway deployed successfully!"
            echo "API Gateway ID: $API_ID"
            echo "Deployment ID: $DEPLOYMENT_ID" 
            echo "API Endpoint: https://$API_ID.execute-api.${AWS_REGION}.amazonaws.com/prod/"
          else
            echo "API Gateway already exists with ID: $API_ID"
            
            # Create a new deployment to update the API
            DEPLOYMENT_ID=$(aws apigateway create-deployment --rest-api-id $API_ID --stage-name prod --query "id" --output text)
            
            echo "Created new deployment with ID: $DEPLOYMENT_ID"
            echo "API Endpoint: https://$API_ID.execute-api.${AWS_REGION}.amazonaws.com/prod/"
          fi
          
          # Output the API Gateway URL
          echo "API_GATEWAY_URL=https://$API_ID.execute-api.${AWS_REGION}.amazonaws.com/prod/" >> $GITHUB_ENV

      - name: Update Lambda Handler if needed
        run: |
          # Check the current handler configuration
          CURRENT_HANDLER=$(aws lambda get-function-configuration --function-name fastapi-cicd-lambda-716360905893 --query "Handler" --output text)
          
          # Update handler if it's not correctly set to app.main.handler
          if [ "$CURRENT_HANDLER" != "app.main.handler" ]; then
            echo "Updating Lambda handler from $CURRENT_HANDLER to app.main.handler"
            aws lambda update-function-configuration --function-name fastapi-cicd-lambda-716360905893 --handler app.main.handler
          else
            echo "Lambda handler is already correctly set to app.main.handler"
          fi

      - name: Output API Gateway Information
        run: |
          echo "===================== DEPLOYMENT COMPLETE ====================="
          echo "Your FastAPI application is now available at:"
          echo "$API_GATEWAY_URL"
          echo "==============================================================="